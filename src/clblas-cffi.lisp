;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.2
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(in-package :cl-clblas)

(cl:defmacro defanonenum (cl:&body enums)
  "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                  for index = 0 then (cl:1+ index)
                  when (cl:listp value) do (cl:setf index (cl:second value)
                                                    value (cl:first value))
                    collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcenum clblasOrder
  :clblasRowMajor
  :clblasColumnMajor)

(cffi:defcenum clblasTranspose
  :clblasNoTrans
  :clblasTrans
  :clblasConjTrans)

(cffi:defcenum clblasUplo
  :clblasUpper
  :clblasLower)

(cffi:defcenum clblasDiag
  :clblasUnit
  :clblasNonUnit)

(cffi:defcenum clblasSide
  :clblasLeft
  :clblasRight)

(cffi:defcenum clblasStatus
  #|
  (:clblasSuccess #.CL_SUCCESS)
  (:clblasInvalidValue #.CL_INVALID_VALUE)
  (:clblasInvalidCommandQueue #.CL_INVALID_COMMAND_QUEUE)
  (:clblasInvalidContext #.CL_INVALID_CONTEXT)
  (:clblasInvalidMemObject #.CL_INVALID_MEM_OBJECT)
  (:clblasInvalidDevice #.CL_INVALID_DEVICE)
  (:clblasInvalidEventWaitList #.CL_INVALID_EVENT_WAIT_LIST)
  (:clblasOutOfResources #.CL_OUT_OF_RESOURCES)
  (:clblasOutOfHostMemory #.CL_OUT_OF_HOST_MEMORY)
  (:clblasInvalidOperation #.CL_INVALID_OPERATION)
  (:clblasCompilerNotAvailable #.CL_COMPILER_NOT_AVAILABLE)
  (:clblasBuildProgramFailure #.CL_BUILD_PROGRAM_FAILURE)
  |#
  (:clblasSuccess #.0)
  (:clblasInvalidValue #.-30)
  (:clblasInvalidCommandQueue #.-36)
  (:clblasInvalidContext #.-34)
  (:clblasInvalidMemObject #.-38)
  (:clblasInvalidDevice #.-33)
  (:clblasInvalidEventWaitList #.-57)
  (:clblasOutOfResources #.-5)
  (:clblasOutOfHostMemory #.-6)
  (:clblasInvalidOperation #.-59)
  (:clblasCompilerNotAvailable #.-3)
  (:clblasBuildProgramFailure #.-11)
  (:clblasNotImplemented #.-1024)
  :clblasNotInitialized
  :clblasInvalidMatA
  :clblasInvalidMatB
  :clblasInvalidMatC
  :clblasInvalidVecX
  :clblasInvalidVecY
  :clblasInvalidDim
  :clblasInvalidLeadDimA
  :clblasInvalidLeadDimB
  :clblasInvalidLeadDimC
  :clblasInvalidIncX
  :clblasInvalidIncY
  :clblasInsufficientMemMatA
  :clblasInsufficientMemMatB
  :clblasInsufficientMemMatC
  :clblasInsufficientMemVecX
  :clblasInsufficientMemVecY)

(cffi:defcfun ("clblasGetVersion" clblasGetVersion) clblasStatus
  (major :pointer)
  (minor :pointer)
  (patch :pointer))

(cffi:defcfun ("clblasSetup" clblasSetup) clblasStatus)

(cffi:defcfun ("clblasTeardown" clblasTeardown) :void)

(cffi:defcfun ("clblasSswap" clblasSswap) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDswap" clblasDswap) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCswap" clblasCswap) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZswap" clblasZswap) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSscal" clblasSscal) clblasStatus
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDscal" clblasDscal) clblasStatus
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCscal" clblasCscal) clblasStatus
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZscal" clblasZscal) clblasStatus
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCsscal" clblasCsscal) clblasStatus
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZdscal" clblasZdscal) clblasStatus
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasScopy" clblasScopy) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDcopy" clblasDcopy) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCcopy" clblasCcopy) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZcopy" clblasZcopy) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSaxpy" clblasSaxpy) clblasStatus
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDaxpy" clblasDaxpy) clblasStatus
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCaxpy" clblasCaxpy) clblasStatus
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZaxpy" clblasZaxpy) clblasStatus
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSdot" clblasSdot) clblasStatus
  (N :pointer)
  (dotProduct :pointer)
  (offDP :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDdot" clblasDdot) clblasStatus
  (N :pointer)
  (dotProduct :pointer)
  (offDP :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCdotu" clblasCdotu) clblasStatus
  (N :pointer)
  (dotProduct :pointer)
  (offDP :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZdotu" clblasZdotu) clblasStatus
  (N :pointer)
  (dotProduct :pointer)
  (offDP :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCdotc" clblasCdotc) clblasStatus
  (N :pointer)
  (dotProduct :pointer)
  (offDP :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZdotc" clblasZdotc) clblasStatus
  (N :pointer)
  (dotProduct :pointer)
  (offDP :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSrotg" clblasSrotg) clblasStatus
  (SA :pointer)
  (offSA :pointer)
  (SB :pointer)
  (offSB :pointer)
  (C :pointer)
  (offC :pointer)
  (S :pointer)
  (offS :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDrotg" clblasDrotg) clblasStatus
  (DA :pointer)
  (offDA :pointer)
  (DB :pointer)
  (offDB :pointer)
  (C :pointer)
  (offC :pointer)
  (S :pointer)
  (offS :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCrotg" clblasCrotg) clblasStatus
  (CA :pointer)
  (offCA :pointer)
  (CB :pointer)
  (offCB :pointer)
  (C :pointer)
  (offC :pointer)
  (S :pointer)
  (offS :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZrotg" clblasZrotg) clblasStatus
  (CA :pointer)
  (offCA :pointer)
  (CB :pointer)
  (offCB :pointer)
  (C :pointer)
  (offC :pointer)
  (S :pointer)
  (offS :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSrotmg" clblasSrotmg) clblasStatus
  (SD1 :pointer)
  (offSD1 :pointer)
  (SD2 :pointer)
  (offSD2 :pointer)
  (SX1 :pointer)
  (offSX1 :pointer)
  (SY1 :pointer)
  (offSY1 :pointer)
  (SPARAM :pointer)
  (offSparam :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDrotmg" clblasDrotmg) clblasStatus
  (DD1 :pointer)
  (offDD1 :pointer)
  (DD2 :pointer)
  (offDD2 :pointer)
  (DX1 :pointer)
  (offDX1 :pointer)
  (DY1 :pointer)
  (offDY1 :pointer)
  (DPARAM :pointer)
  (offDparam :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSrot" clblasSrot) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (C :pointer)
  (S :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDrot" clblasDrot) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (C :pointer)
  (S :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCsrot" clblasCsrot) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (C :pointer)
  (S :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZdrot" clblasZdrot) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (C :pointer)
  (S :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSrotm" clblasSrotm) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (SPARAM :pointer)
  (offSparam :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDrotm" clblasDrotm) clblasStatus
  (N :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (DPARAM :pointer)
  (offDparam :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSnrm2" clblasSnrm2) clblasStatus
  (N :pointer)
  (NRM2 :pointer)
  (offNRM2 :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDnrm2" clblasDnrm2) clblasStatus
  (N :pointer)
  (NRM2 :pointer)
  (offNRM2 :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasScnrm2" clblasScnrm2) clblasStatus
  (N :pointer)
  (NRM2 :pointer)
  (offNRM2 :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDznrm2" clblasDznrm2) clblasStatus
  (N :pointer)
  (NRM2 :pointer)
  (offNRM2 :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasiSamax" clblasiSamax) clblasStatus
  (N :pointer)
  (iMax :pointer)
  (offiMax :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasiDamax" clblasiDamax) clblasStatus
  (N :pointer)
  (iMax :pointer)
  (offiMax :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasiCamax" clblasiCamax) clblasStatus
  (N :pointer)
  (iMax :pointer)
  (offiMax :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasiZamax" clblasiZamax) clblasStatus
  (N :pointer)
  (iMax :pointer)
  (offiMax :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSasum" clblasSasum) clblasStatus
  (N :pointer)
  (asum :pointer)
  (offAsum :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDasum" clblasDasum) clblasStatus
  (N :pointer)
  (asum :pointer)
  (offAsum :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasScasum" clblasScasum) clblasStatus
  (N :pointer)
  (asum :pointer)
  (offAsum :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDzasum" clblasDzasum) clblasStatus
  (N :pointer)
  (asum :pointer)
  (offAsum :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSgemv" clblasSgemv) clblasStatus
  (order clblasOrder)
  (transA clblasTranspose)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (x :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDgemv" clblasDgemv) clblasStatus
  (order clblasOrder)
  (transA clblasTranspose)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (x :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCgemv" clblasCgemv) clblasStatus
  (order clblasOrder)
  (transA clblasTranspose)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (x :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZgemv" clblasZgemv) clblasStatus
  (order clblasOrder)
  (transA clblasTranspose)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (x :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSsymv" clblasSsymv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (x :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDsymv" clblasDsymv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (x :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasChemv" clblasChemv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZhemv" clblasZhemv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasStrmv" clblasStrmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDtrmv" clblasDtrmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCtrmv" clblasCtrmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZtrmv" clblasZtrmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasStrsv" clblasStrsv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDtrsv" clblasDtrsv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCtrsv" clblasCtrsv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZtrsv" clblasZtrsv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSger" clblasSger) clblasStatus
  (order clblasOrder)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDger" clblasDger) clblasStatus
  (order clblasOrder)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCgeru" clblasCgeru) clblasStatus
  (order clblasOrder)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZgeru" clblasZgeru) clblasStatus
  (order clblasOrder)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCgerc" clblasCgerc) clblasStatus
  (order clblasOrder)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZgerc" clblasZgerc) clblasStatus
  (order clblasOrder)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSsyr" clblasSsyr) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDsyr" clblasDsyr) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCher" clblasCher) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZher" clblasZher) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSsyr2" clblasSsyr2) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDsyr2" clblasDsyr2) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCher2" clblasCher2) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZher2" clblasZher2) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasStpmv" clblasStpmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (AP :pointer)
  (offa :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDtpmv" clblasDtpmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (AP :pointer)
  (offa :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCtpmv" clblasCtpmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (AP :pointer)
  (offa :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZtpmv" clblasZtpmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (AP :pointer)
  (offa :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasStpsv" clblasStpsv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (A :pointer)
  (offa :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDtpsv" clblasDtpsv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (A :pointer)
  (offa :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCtpsv" clblasCtpsv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (A :pointer)
  (offa :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZtpsv" clblasZtpsv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (A :pointer)
  (offa :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSspmv" clblasSspmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (AP :pointer)
  (offa :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDspmv" clblasDspmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (AP :pointer)
  (offa :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasChpmv" clblasChpmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (AP :pointer)
  (offa :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZhpmv" clblasZhpmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (AP :pointer)
  (offa :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSspr" clblasSspr) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (AP :pointer)
  (offa :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDspr" clblasDspr) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (AP :pointer)
  (offa :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasChpr" clblasChpr) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (AP :pointer)
  (offa :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZhpr" clblasZhpr) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (AP :pointer)
  (offa :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSspr2" clblasSspr2) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (AP :pointer)
  (offa :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDspr2" clblasDspr2) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (AP :pointer)
  (offa :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasChpr2" clblasChpr2) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (AP :pointer)
  (offa :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZhpr2" clblasZhpr2) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (alpha :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (AP :pointer)
  (offa :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSgbmv" clblasSgbmv) clblasStatus
  (order clblasOrder)
  (trans clblasTranspose)
  (M :pointer)
  (N :pointer)
  (KL :pointer)
  (KU :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDgbmv" clblasDgbmv) clblasStatus
  (order clblasOrder)
  (trans clblasTranspose)
  (M :pointer)
  (N :pointer)
  (KL :pointer)
  (KU :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCgbmv" clblasCgbmv) clblasStatus
  (order clblasOrder)
  (trans clblasTranspose)
  (M :pointer)
  (N :pointer)
  (KL :pointer)
  (KU :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZgbmv" clblasZgbmv) clblasStatus
  (order clblasOrder)
  (trans clblasTranspose)
  (M :pointer)
  (N :pointer)
  (KL :pointer)
  (KU :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasStbmv" clblasStbmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (K :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDtbmv" clblasDtbmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (K :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCtbmv" clblasCtbmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (K :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZtbmv" clblasZtbmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (K :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (scratchBuff :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSsbmv" clblasSsbmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDsbmv" clblasDsbmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasChbmv" clblasChbmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZhbmv" clblasZhbmv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (beta :pointer)
  (Y :pointer)
  (offy :pointer)
  (incy :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasStbsv" clblasStbsv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (K :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDtbsv" clblasDtbsv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (K :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCtbsv" clblasCtbsv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (K :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZtbsv" clblasZtbsv) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (diag clblasDiag)
  (N :pointer)
  (K :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (X :pointer)
  (offx :pointer)
  (incx :int)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSgemm" clblasSgemm) clblasStatus
  (order clblasOrder)
  (transA clblasTranspose)
  (transB clblasTranspose)
  (M :pointer)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offC :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDgemm" clblasDgemm) clblasStatus
  (order clblasOrder)
  (transA clblasTranspose)
  (transB clblasTranspose)
  (M :pointer)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offC :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCgemm" clblasCgemm) clblasStatus
  (order clblasOrder)
  (transA clblasTranspose)
  (transB clblasTranspose)
  (M :pointer)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offC :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZgemm" clblasZgemm) clblasStatus
  (order clblasOrder)
  (transA clblasTranspose)
  (transB clblasTranspose)
  (M :pointer)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offC :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasStrmm" clblasStrmm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (diag clblasDiag)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDtrmm" clblasDtrmm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (diag clblasDiag)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCtrmm" clblasCtrmm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (diag clblasDiag)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZtrmm" clblasZtrmm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (diag clblasDiag)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasStrsm" clblasStrsm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (diag clblasDiag)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDtrsm" clblasDtrsm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (diag clblasDiag)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCtrsm" clblasCtrsm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (diag clblasDiag)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZtrsm" clblasZtrsm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (diag clblasDiag)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSsyrk" clblasSsyrk) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (beta :pointer)
  (C :pointer)
  (offC :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDsyrk" clblasDsyrk) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (beta :pointer)
  (C :pointer)
  (offC :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCsyrk" clblasCsyrk) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (beta :pointer)
  (C :pointer)
  (offC :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZsyrk" clblasZsyrk) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (beta :pointer)
  (C :pointer)
  (offC :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSsyr2k" clblasSsyr2k) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (transAB clblasTranspose)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offC :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDsyr2k" clblasDsyr2k) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (transAB clblasTranspose)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offC :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCsyr2k" clblasCsyr2k) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (transAB clblasTranspose)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offC :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZsyr2k" clblasZsyr2k) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (transAB clblasTranspose)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offA :pointer)
  (lda :pointer)
  (B :pointer)
  (offB :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offC :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasSsymm" clblasSsymm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (B :pointer)
  (offb :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offc :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasDsymm" clblasDsymm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (B :pointer)
  (offb :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offc :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCsymm" clblasCsymm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (B :pointer)
  (offb :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offc :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZsymm" clblasZsymm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (B :pointer)
  (offb :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offc :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasChemm" clblasChemm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (B :pointer)
  (offb :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offc :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZhemm" clblasZhemm) clblasStatus
  (order clblasOrder)
  (side clblasSide)
  (uplo clblasUplo)
  (M :pointer)
  (N :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (B :pointer)
  (offb :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offc :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCherk" clblasCherk) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (N :pointer)
  (K :pointer)
  (alpha :float)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (beta :float)
  (C :pointer)
  (offc :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZherk" clblasZherk) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (transA clblasTranspose)
  (N :pointer)
  (K :pointer)
  (alpha :double)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (beta :double)
  (C :pointer)
  (offc :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCher2k" clblasCher2k) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (B :pointer)
  (offb :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offc :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasZher2k" clblasZher2k) clblasStatus
  (order clblasOrder)
  (uplo clblasUplo)
  (trans clblasTranspose)
  (N :pointer)
  (K :pointer)
  (alpha :pointer)
  (A :pointer)
  (offa :pointer)
  (lda :pointer)
  (B :pointer)
  (offb :pointer)
  (ldb :pointer)
  (beta :pointer)
  (C :pointer)
  (offc :pointer)
  (ldc :pointer)
  (numCommandQueues :pointer)
  (commandQueues :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasMatrixSizeInfo" clblasMatrixSizeInfo) clblasStatus
  (order clblasOrder)
  (rows :pointer)
  (columns :pointer)
  (elemsize :pointer)
  (padding :pointer)
  (ld :pointer)
  (fullsize :pointer))

(cffi:defcfun ("clblasCreateMatrix" clblasCreateMatrix) :pointer
  (context :pointer)
  (order clblasOrder)
  (rows :pointer)
  (columns :pointer)
  (elemsize :pointer)
  (padding :pointer)
  (ld :pointer)
  (fullsize :pointer)
  (err :pointer))

(cffi:defcfun ("clblasCreateMatrixWithLd" clblasCreateMatrixWithLd) :pointer
  (context :pointer)
  (order clblasOrder)
  (rows :pointer)
  (columns :pointer)
  (elemsize :pointer)
  (ld :pointer)
  (fullsize :pointer)
  (err :pointer))

(cffi:defcfun ("clblasCreateMatrixFromHost" clblasCreateMatrixFromHost) :pointer
  (context :pointer)
  (order clblasOrder)
  (rows :pointer)
  (columns :pointer)
  (elemsize :pointer)
  (ld :pointer)
  (host :pointer)
  (off_host :pointer)
  (ld_host :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (err :pointer))

(cffi:defcfun ("clblasWriteSubMatrix" clblasWriteSubMatrix) clblasStatus
  (order clblasOrder)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (nrA :pointer)
  (ncA :pointer)
  (xA :pointer)
  (yA :pointer)
  (B :pointer)
  (offB :pointer)
  (ldB :pointer)
  (nrB :pointer)
  (ncB :pointer)
  (xB :pointer)
  (yB :pointer)
  (nx :pointer)
  (ny :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer))

(cffi:defcfun ("clblasWriteSubMatrixAsync" clblasWriteSubMatrixAsync) clblasStatus
  (order clblasOrder)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (nrA :pointer)
  (ncA :pointer)
  (xA :pointer)
  (yA :pointer)
  (B :pointer)
  (offB :pointer)
  (ldB :pointer)
  (nrB :pointer)
  (ncB :pointer)
  (xB :pointer)
  (yB :pointer)
  (nx :pointer)
  (ny :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (event :pointer))

(cffi:defcfun ("clblasReadSubMatrix" clblasReadSubMatrix) clblasStatus
  (order clblasOrder)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (nrA :pointer)
  (ncA :pointer)
  (xA :pointer)
  (yA :pointer)
  (B :pointer)
  (offB :pointer)
  (ldB :pointer)
  (nrB :pointer)
  (ncB :pointer)
  (xB :pointer)
  (yB :pointer)
  (nx :pointer)
  (ny :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer))

(cffi:defcfun ("clblasReadSubMatrixAsync" clblasReadSubMatrixAsync) clblasStatus
  (order clblasOrder)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (nrA :pointer)
  (ncA :pointer)
  (xA :pointer)
  (yA :pointer)
  (B :pointer)
  (offB :pointer)
  (ldB :pointer)
  (nrB :pointer)
  (ncB :pointer)
  (xB :pointer)
  (yB :pointer)
  (nx :pointer)
  (ny :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (event :pointer))

(cffi:defcfun ("clblasCopySubMatrix" clblasCopySubMatrix) clblasStatus
  (order clblasOrder)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (nrA :pointer)
  (ncA :pointer)
  (xA :pointer)
  (yA :pointer)
  (B :pointer)
  (offB :pointer)
  (ldB :pointer)
  (nrB :pointer)
  (ncB :pointer)
  (xB :pointer)
  (yB :pointer)
  (nx :pointer)
  (ny :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer))

(cffi:defcfun ("clblasCopySubMatrixAsync" clblasCopySubMatrixAsync) clblasStatus
  (order clblasOrder)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (nrA :pointer)
  (ncA :pointer)
  (xA :pointer)
  (yA :pointer)
  (B :pointer)
  (offB :pointer)
  (ldB :pointer)
  (nrB :pointer)
  (ncB :pointer)
  (xB :pointer)
  (yB :pointer)
  (nx :pointer)
  (ny :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (event :pointer))

(cffi:defcfun ("clblasWriteVector" clblasWriteVector) clblasStatus
  (nb_elem :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (B :pointer)
  (offB :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer))

(cffi:defcfun ("clblasWriteVectorAsync" clblasWriteVectorAsync) clblasStatus
  (nb_elem :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (B :pointer)
  (offB :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasReadVector" clblasReadVector) clblasStatus
  (nb_elem :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (B :pointer)
  (offB :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer))

(cffi:defcfun ("clblasReadVectorAsync" clblasReadVectorAsync) clblasStatus
  (nb_elem :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (B :pointer)
  (offB :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCopyVector" clblasCopyVector) clblasStatus
  (nb_elem :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (B :pointer)
  (offB :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer))

(cffi:defcfun ("clblasCopyVectorAsync" clblasCopyVectorAsync) clblasStatus
  (nb_elem :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (B :pointer)
  (offB :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasWriteMatrix" clblasWriteMatrix) clblasStatus
  (order clblasOrder)
  (sx :pointer)
  (sy :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (B :pointer)
  (offB :pointer)
  (ldB :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer))

(cffi:defcfun ("clblasWriteMatrixAsync" clblasWriteMatrixAsync) clblasStatus
  (order clblasOrder)
  (sx :pointer)
  (sy :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (B :pointer)
  (offB :pointer)
  (ldB :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasReadMatrix" clblasReadMatrix) clblasStatus
  (order clblasOrder)
  (sx :pointer)
  (sy :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (B :pointer)
  (offB :pointer)
  (ldB :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer))

(cffi:defcfun ("clblasReadMatrixAsync" clblasReadMatrixAsync) clblasStatus
  (order clblasOrder)
  (sx :pointer)
  (sy :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (B :pointer)
  (offB :pointer)
  (ldB :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasCopyMatrix" clblasCopyMatrix) clblasStatus
  (order clblasOrder)
  (sx :pointer)
  (sy :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (B :pointer)
  (offB :pointer)
  (ldB :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer))

(cffi:defcfun ("clblasCopyMatrixAsync" clblasCopyMatrixAsync) clblasStatus
  (order clblasOrder)
  (sx :pointer)
  (sy :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (B :pointer)
  (offB :pointer)
  (ldB :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (events :pointer))

(cffi:defcfun ("clblasFillVector" clblasFillVector) clblasStatus
  (nb_elem :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (host :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer))

(cffi:defcfun ("clblasFillVectorAsync" clblasFillVectorAsync) clblasStatus
  (nb_elem :pointer)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (pattern :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (event :pointer))

(cffi:defcfun ("clblasFillMatrix" clblasFillMatrix) clblasStatus
  (order clblasOrder)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (nrA :pointer)
  (ncA :pointer)
  (pattern :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer))

(cffi:defcfun ("clblasFillSubMatrix" clblasFillSubMatrix) clblasStatus
  (order clblasOrder)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (nrA :pointer)
  (ncA :pointer)
  (xA :pointer)
  (yA :pointer)
  (nx :pointer)
  (ny :pointer)
  (pattern :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer))

(cffi:defcfun ("clblasFillSubMatrixAsync" clblasFillSubMatrixAsync) clblasStatus
  (order clblasOrder)
  (element_size :pointer)
  (A :pointer)
  (offA :pointer)
  (ldA :pointer)
  (sxA :pointer)
  (syA :pointer)
  (xA :int)
  (yA :int)
  (nx :pointer)
  (ny :pointer)
  (host :pointer)
  (command_queue :pointer)
  (numEventsInWaitList :pointer)
  (eventWaitList :pointer)
  (event :pointer))


